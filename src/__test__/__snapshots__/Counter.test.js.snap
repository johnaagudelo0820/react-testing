// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Counter /> should render without errors 1`] = `
<Counter>
  <p
    id="option"
  >
    The Godfather
  </p>
  <WithStyles(ForwardRef(Autocomplete))
    debug={true}
    getOptionLabel={[Function]}
    id="combo-box-demo"
    name="tags"
    onChange={[Function]}
    options={
      Array [
        Object {
          "title": "The Shawshank Redemption",
          "year": 1994,
        },
        Object {
          "title": "The Godfather",
          "year": 1972,
        },
        Object {
          "title": "The Godfather: Part II",
          "year": 1974,
        },
      ]
    }
    renderInput={[Function]}
    style={
      Object {
        "width": 300,
      }
    }
  >
    <ForwardRef(Autocomplete)
      classes={
        Object {
          "clearIndicator": "MuiAutocomplete-clearIndicator",
          "clearIndicatorDirty": "MuiAutocomplete-clearIndicatorDirty",
          "endAdornment": "MuiAutocomplete-endAdornment",
          "focused": "Mui-focused",
          "groupLabel": "MuiAutocomplete-groupLabel",
          "groupUl": "MuiAutocomplete-groupUl",
          "hasClearIcon": "MuiAutocomplete-hasClearIcon",
          "hasPopupIcon": "MuiAutocomplete-hasPopupIcon",
          "input": "MuiAutocomplete-input",
          "inputFocused": "MuiAutocomplete-inputFocused",
          "inputRoot": "MuiAutocomplete-inputRoot",
          "listbox": "MuiAutocomplete-listbox",
          "loading": "MuiAutocomplete-loading",
          "noOptions": "MuiAutocomplete-noOptions",
          "option": "MuiAutocomplete-option",
          "paper": "MuiAutocomplete-paper",
          "popper": "MuiAutocomplete-popper",
          "popperDisablePortal": "MuiAutocomplete-popperDisablePortal",
          "popupIndicator": "MuiAutocomplete-popupIndicator",
          "popupIndicatorOpen": "MuiAutocomplete-popupIndicatorOpen",
          "root": "MuiAutocomplete-root",
          "tag": "MuiAutocomplete-tag",
          "tagSizeSmall": "MuiAutocomplete-tagSizeSmall",
        }
      }
      debug={true}
      getOptionLabel={[Function]}
      id="combo-box-demo"
      name="tags"
      onChange={[Function]}
      options={
        Array [
          Object {
            "title": "The Shawshank Redemption",
            "year": 1994,
          },
          Object {
            "title": "The Godfather",
            "year": 1972,
          },
          Object {
            "title": "The Godfather: Part II",
            "year": 1974,
          },
        ]
      }
      renderInput={[Function]}
      style={
        Object {
          "width": 300,
        }
      }
    >
      <div
        aria-expanded={false}
        aria-owns={null}
        className="MuiAutocomplete-root MuiAutocomplete-hasClearIcon MuiAutocomplete-hasPopupIcon"
        name="tags"
        onClick={[Function]}
        onKeyDown={[Function]}
        onMouseDown={[Function]}
        role="combobox"
        style={
          Object {
            "width": 300,
          }
        }
      >
        <WithStyles(ForwardRef(TextField))
          InputLabelProps={
            Object {
              "htmlFor": "combo-box-demo",
              "id": "combo-box-demo-label",
            }
          }
          InputProps={
            Object {
              "className": "MuiAutocomplete-inputRoot",
              "endAdornment": <div
                className="MuiAutocomplete-endAdornment"
              >
                <ForwardRef(WithStyles)
                  aria-label="Clear"
                  className="MuiAutocomplete-clearIndicator"
                  onClick={[Function]}
                  tabIndex={-1}
                  title="Clear"
                >
                  <UNDEFINED
                    fontSize="small"
                  />
                </ForwardRef(WithStyles)>
                <ForwardRef(WithStyles)
                  aria-label="Open"
                  className="MuiAutocomplete-popupIndicator"
                  disabled={false}
                  onClick={[Function]}
                  tabIndex={-1}
                  title="Open"
                >
                  <UNDEFINED />
                </ForwardRef(WithStyles)>
              </div>,
              "ref": [Function],
              "startAdornment": undefined,
            }
          }
          disabled={false}
          fullWidth={true}
          id="combo-box-demo"
          inputProps={
            Object {
              "aria-activedescendant": null,
              "aria-autocomplete": "list",
              "aria-controls": null,
              "autoCapitalize": "none",
              "autoComplete": "off",
              "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
              "disabled": false,
              "id": "combo-box-demo",
              "onBlur": [Function],
              "onChange": [Function],
              "onFocus": [Function],
              "onMouseDown": [Function],
              "ref": Object {
                "current": <input
                  aria-autocomplete="list"
                  aria-invalid="false"
                  autocapitalize="none"
                  autocomplete="off"
                  class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                  id="combo-box-demo"
                  spellcheck="false"
                  type="text"
                  value=""
                />,
              },
              "spellCheck": "false",
              "value": "",
            }
          }
          label="Combo box"
          variant="outlined"
        >
          <ForwardRef(TextField)
            InputLabelProps={
              Object {
                "htmlFor": "combo-box-demo",
                "id": "combo-box-demo-label",
              }
            }
            InputProps={
              Object {
                "className": "MuiAutocomplete-inputRoot",
                "endAdornment": <div
                  className="MuiAutocomplete-endAdornment"
                >
                  <ForwardRef(WithStyles)
                    aria-label="Clear"
                    className="MuiAutocomplete-clearIndicator"
                    onClick={[Function]}
                    tabIndex={-1}
                    title="Clear"
                  >
                    <UNDEFINED
                      fontSize="small"
                    />
                  </ForwardRef(WithStyles)>
                  <ForwardRef(WithStyles)
                    aria-label="Open"
                    className="MuiAutocomplete-popupIndicator"
                    disabled={false}
                    onClick={[Function]}
                    tabIndex={-1}
                    title="Open"
                  >
                    <UNDEFINED />
                  </ForwardRef(WithStyles)>
                </div>,
                "ref": [Function],
                "startAdornment": undefined,
              }
            }
            classes={
              Object {
                "root": "MuiTextField-root",
              }
            }
            disabled={false}
            fullWidth={true}
            id="combo-box-demo"
            inputProps={
              Object {
                "aria-activedescendant": null,
                "aria-autocomplete": "list",
                "aria-controls": null,
                "autoCapitalize": "none",
                "autoComplete": "off",
                "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                "disabled": false,
                "id": "combo-box-demo",
                "onBlur": [Function],
                "onChange": [Function],
                "onFocus": [Function],
                "onMouseDown": [Function],
                "ref": Object {
                  "current": <input
                    aria-autocomplete="list"
                    aria-invalid="false"
                    autocapitalize="none"
                    autocomplete="off"
                    class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                    id="combo-box-demo"
                    spellcheck="false"
                    type="text"
                    value=""
                  />,
                },
                "spellCheck": "false",
                "value": "",
              }
            }
            label="Combo box"
            variant="outlined"
          >
            <WithStyles(ForwardRef(FormControl))
              className="MuiTextField-root"
              color="primary"
              disabled={false}
              error={false}
              fullWidth={true}
              required={false}
              variant="outlined"
            >
              <ForwardRef(FormControl)
                className="MuiTextField-root"
                classes={
                  Object {
                    "fullWidth": "MuiFormControl-fullWidth",
                    "marginDense": "MuiFormControl-marginDense",
                    "marginNormal": "MuiFormControl-marginNormal",
                    "root": "MuiFormControl-root",
                  }
                }
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                required={false}
                variant="outlined"
              >
                <div
                  className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                >
                  <WithStyles(ForwardRef(InputLabel))
                    htmlFor="combo-box-demo"
                    id="combo-box-demo-label"
                  >
                    <ForwardRef(InputLabel)
                      classes={
                        Object {
                          "animated": "MuiInputLabel-animated",
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "filled": "MuiInputLabel-filled",
                          "focused": "Mui-focused",
                          "formControl": "MuiInputLabel-formControl",
                          "marginDense": "MuiInputLabel-marginDense",
                          "outlined": "MuiInputLabel-outlined",
                          "required": "Mui-required",
                          "root": "MuiInputLabel-root",
                          "shrink": "MuiInputLabel-shrink",
                        }
                      }
                      htmlFor="combo-box-demo"
                      id="combo-box-demo-label"
                    >
                      <WithStyles(ForwardRef(FormLabel))
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                        classes={
                          Object {
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "required": "Mui-required",
                          }
                        }
                        data-shrink={false}
                        htmlFor="combo-box-demo"
                        id="combo-box-demo-label"
                      >
                        <ForwardRef(FormLabel)
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                          classes={
                            Object {
                              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                              "colorSecondary": "MuiFormLabel-colorSecondary",
                              "disabled": "Mui-disabled Mui-disabled",
                              "error": "Mui-error Mui-error",
                              "filled": "MuiFormLabel-filled",
                              "focused": "Mui-focused Mui-focused",
                              "required": "Mui-required Mui-required",
                              "root": "MuiFormLabel-root",
                            }
                          }
                          data-shrink={false}
                          htmlFor="combo-box-demo"
                          id="combo-box-demo-label"
                        >
                          <label
                            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                            data-shrink={false}
                            htmlFor="combo-box-demo"
                            id="combo-box-demo-label"
                          >
                            Combo box
                          </label>
                        </ForwardRef(FormLabel)>
                      </WithStyles(ForwardRef(FormLabel))>
                    </ForwardRef(InputLabel)>
                  </WithStyles(ForwardRef(InputLabel))>
                  <WithStyles(ForwardRef(OutlinedInput))
                    autoFocus={false}
                    className="MuiAutocomplete-inputRoot"
                    endAdornment={
                      <div
                        className="MuiAutocomplete-endAdornment"
                      >
                        <ForwardRef(WithStyles)
                          aria-label="Clear"
                          className="MuiAutocomplete-clearIndicator"
                          onClick={[Function]}
                          tabIndex={-1}
                          title="Clear"
                        >
                          <UNDEFINED
                            fontSize="small"
                          />
                        </ForwardRef(WithStyles)>
                        <ForwardRef(WithStyles)
                          aria-label="Open"
                          className="MuiAutocomplete-popupIndicator"
                          disabled={false}
                          onClick={[Function]}
                          tabIndex={-1}
                          title="Open"
                        >
                          <UNDEFINED />
                        </ForwardRef(WithStyles)>
                      </div>
                    }
                    fullWidth={true}
                    id="combo-box-demo"
                    inputProps={
                      Object {
                        "aria-activedescendant": null,
                        "aria-autocomplete": "list",
                        "aria-controls": null,
                        "autoCapitalize": "none",
                        "autoComplete": "off",
                        "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                        "disabled": false,
                        "id": "combo-box-demo",
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "onMouseDown": [Function],
                        "ref": Object {
                          "current": <input
                            aria-autocomplete="list"
                            aria-invalid="false"
                            autocapitalize="none"
                            autocomplete="off"
                            class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                            id="combo-box-demo"
                            spellcheck="false"
                            type="text"
                            value=""
                          />,
                        },
                        "spellCheck": "false",
                        "value": "",
                      }
                    }
                    label={
                      <React.Fragment>
                        Combo box
                      </React.Fragment>
                    }
                    multiline={false}
                  >
                    <ForwardRef(OutlinedInput)
                      autoFocus={false}
                      className="MuiAutocomplete-inputRoot"
                      classes={
                        Object {
                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                          "adornedStart": "MuiOutlinedInput-adornedStart",
                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "input": "MuiOutlinedInput-input",
                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                          "marginDense": "MuiOutlinedInput-marginDense",
                          "multiline": "MuiOutlinedInput-multiline",
                          "notchedOutline": "MuiOutlinedInput-notchedOutline",
                          "root": "MuiOutlinedInput-root",
                        }
                      }
                      endAdornment={
                        <div
                          className="MuiAutocomplete-endAdornment"
                        >
                          <ForwardRef(WithStyles)
                            aria-label="Clear"
                            className="MuiAutocomplete-clearIndicator"
                            onClick={[Function]}
                            tabIndex={-1}
                            title="Clear"
                          >
                            <UNDEFINED
                              fontSize="small"
                            />
                          </ForwardRef(WithStyles)>
                          <ForwardRef(WithStyles)
                            aria-label="Open"
                            className="MuiAutocomplete-popupIndicator"
                            disabled={false}
                            onClick={[Function]}
                            tabIndex={-1}
                            title="Open"
                          >
                            <UNDEFINED />
                          </ForwardRef(WithStyles)>
                        </div>
                      }
                      fullWidth={true}
                      id="combo-box-demo"
                      inputProps={
                        Object {
                          "aria-activedescendant": null,
                          "aria-autocomplete": "list",
                          "aria-controls": null,
                          "autoCapitalize": "none",
                          "autoComplete": "off",
                          "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                          "disabled": false,
                          "id": "combo-box-demo",
                          "onBlur": [Function],
                          "onChange": [Function],
                          "onFocus": [Function],
                          "onMouseDown": [Function],
                          "ref": Object {
                            "current": <input
                              aria-autocomplete="list"
                              aria-invalid="false"
                              autocapitalize="none"
                              autocomplete="off"
                              class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                              id="combo-box-demo"
                              spellcheck="false"
                              type="text"
                              value=""
                            />,
                          },
                          "spellCheck": "false",
                          "value": "",
                        }
                      }
                      label={
                        <React.Fragment>
                          Combo box
                        </React.Fragment>
                      }
                      multiline={false}
                    >
                      <WithStyles(ForwardRef(InputBase))
                        autoFocus={false}
                        className="MuiAutocomplete-inputRoot"
                        classes={
                          Object {
                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "input": "MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                            "marginDense": "MuiOutlinedInput-marginDense",
                            "multiline": "MuiOutlinedInput-multiline",
                            "notchedOutline": null,
                            "root": "MuiOutlinedInput-root",
                          }
                        }
                        endAdornment={
                          <div
                            className="MuiAutocomplete-endAdornment"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="Clear"
                              className="MuiAutocomplete-clearIndicator"
                              onClick={[Function]}
                              tabIndex={-1}
                              title="Clear"
                            >
                              <UNDEFINED
                                fontSize="small"
                              />
                            </ForwardRef(WithStyles)>
                            <ForwardRef(WithStyles)
                              aria-label="Open"
                              className="MuiAutocomplete-popupIndicator"
                              disabled={false}
                              onClick={[Function]}
                              tabIndex={-1}
                              title="Open"
                            >
                              <UNDEFINED />
                            </ForwardRef(WithStyles)>
                          </div>
                        }
                        fullWidth={true}
                        id="combo-box-demo"
                        inputComponent="input"
                        inputProps={
                          Object {
                            "aria-activedescendant": null,
                            "aria-autocomplete": "list",
                            "aria-controls": null,
                            "autoCapitalize": "none",
                            "autoComplete": "off",
                            "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                            "disabled": false,
                            "id": "combo-box-demo",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "onMouseDown": [Function],
                            "ref": Object {
                              "current": <input
                                aria-autocomplete="list"
                                aria-invalid="false"
                                autocapitalize="none"
                                autocomplete="off"
                                class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                id="combo-box-demo"
                                spellcheck="false"
                                type="text"
                                value=""
                              />,
                            },
                            "spellCheck": "false",
                            "value": "",
                          }
                        }
                        multiline={false}
                        renderSuffix={[Function]}
                        type="text"
                      >
                        <ForwardRef(InputBase)
                          autoFocus={false}
                          className="MuiAutocomplete-inputRoot"
                          classes={
                            Object {
                              "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled Mui-disabled",
                              "error": "Mui-error Mui-error",
                              "focused": "Mui-focused Mui-focused",
                              "formControl": "MuiInputBase-formControl",
                              "fullWidth": "MuiInputBase-fullWidth",
                              "input": "MuiInputBase-input MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                              "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                              "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                              "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                              "root": "MuiInputBase-root MuiOutlinedInput-root",
                            }
                          }
                          endAdornment={
                            <div
                              className="MuiAutocomplete-endAdornment"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="Clear"
                                className="MuiAutocomplete-clearIndicator"
                                onClick={[Function]}
                                tabIndex={-1}
                                title="Clear"
                              >
                                <UNDEFINED
                                  fontSize="small"
                                />
                              </ForwardRef(WithStyles)>
                              <ForwardRef(WithStyles)
                                aria-label="Open"
                                className="MuiAutocomplete-popupIndicator"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={-1}
                                title="Open"
                              >
                                <UNDEFINED />
                              </ForwardRef(WithStyles)>
                            </div>
                          }
                          fullWidth={true}
                          id="combo-box-demo"
                          inputComponent="input"
                          inputProps={
                            Object {
                              "aria-activedescendant": null,
                              "aria-autocomplete": "list",
                              "aria-controls": null,
                              "autoCapitalize": "none",
                              "autoComplete": "off",
                              "className": "MuiAutocomplete-input MuiAutocomplete-inputFocused",
                              "disabled": false,
                              "id": "combo-box-demo",
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onFocus": [Function],
                              "onMouseDown": [Function],
                              "ref": Object {
                                "current": <input
                                  aria-autocomplete="list"
                                  aria-invalid="false"
                                  autocapitalize="none"
                                  autocomplete="off"
                                  class="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                  id="combo-box-demo"
                                  spellcheck="false"
                                  type="text"
                                  value=""
                                />,
                              },
                              "spellCheck": "false",
                              "value": "",
                            }
                          }
                          multiline={false}
                          renderSuffix={[Function]}
                          type="text"
                        >
                          <div
                            className="MuiInputBase-root MuiOutlinedInput-root MuiAutocomplete-inputRoot MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                            onClick={[Function]}
                          >
                            <input
                              aria-activedescendant={null}
                              aria-autocomplete="list"
                              aria-controls={null}
                              aria-invalid={false}
                              autoCapitalize="none"
                              autoComplete="off"
                              autoFocus={false}
                              className="MuiInputBase-input MuiOutlinedInput-input MuiAutocomplete-input MuiAutocomplete-inputFocused MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                              disabled={false}
                              id="combo-box-demo"
                              onAnimationStart={[Function]}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              onMouseDown={[Function]}
                              required={false}
                              spellCheck="false"
                              type="text"
                              value=""
                            />
                            <div
                              className="MuiAutocomplete-endAdornment"
                            >
                              <WithStyles(ForwardRef(IconButton))
                                aria-label="Clear"
                                className="MuiAutocomplete-clearIndicator"
                                onClick={[Function]}
                                tabIndex={-1}
                                title="Clear"
                              >
                                <ForwardRef(IconButton)
                                  aria-label="Clear"
                                  className="MuiAutocomplete-clearIndicator"
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  onClick={[Function]}
                                  tabIndex={-1}
                                  title="Clear"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-label="Clear"
                                    centerRipple={true}
                                    className="MuiIconButton-root MuiAutocomplete-clearIndicator"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    tabIndex={-1}
                                    title="Clear"
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-label="Clear"
                                      centerRipple={true}
                                      className="MuiIconButton-root MuiAutocomplete-clearIndicator"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      tabIndex={-1}
                                      title="Clear"
                                    >
                                      <button
                                        aria-label="Clear"
                                        className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-clearIndicator"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={-1}
                                        title="Clear"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef
                                            fontSize="small"
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              fontSize="small"
                                            >
                                              <ForwardRef(SvgIcon)
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                                fontSize="small"
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className="MuiSvgIcon-root MuiSvgIcon-fontSizeSmall"
                                                  focusable="false"
                                                  role="presentation"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <NoSsr>
                                          <WithStyles(undefined)
                                            center={true}
                                          >
                                            <ForwardRef(TouchRipple)
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child",
                                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                                  "ripple": "MuiTouchRipple-ripple",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                  "root": "MuiTouchRipple-root",
                                                }
                                              }
                                            >
                                              <span
                                                className="MuiTouchRipple-root"
                                              >
                                                <TransitionGroup
                                                  childFactory={[Function]}
                                                  component={null}
                                                  exit={true}
                                                />
                                              </span>
                                            </ForwardRef(TouchRipple)>
                                          </WithStyles(undefined)>
                                        </NoSsr>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                              <WithStyles(ForwardRef(IconButton))
                                aria-label="Open"
                                className="MuiAutocomplete-popupIndicator"
                                disabled={false}
                                onClick={[Function]}
                                tabIndex={-1}
                                title="Open"
                              >
                                <ForwardRef(IconButton)
                                  aria-label="Open"
                                  className="MuiAutocomplete-popupIndicator"
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit",
                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                      "edgeStart": "MuiIconButton-edgeStart",
                                      "label": "MuiIconButton-label",
                                      "root": "MuiIconButton-root",
                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                    }
                                  }
                                  disabled={false}
                                  onClick={[Function]}
                                  tabIndex={-1}
                                  title="Open"
                                >
                                  <WithStyles(ForwardRef(ButtonBase))
                                    aria-label="Open"
                                    centerRipple={true}
                                    className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                    disabled={false}
                                    focusRipple={true}
                                    onClick={[Function]}
                                    tabIndex={-1}
                                    title="Open"
                                  >
                                    <ForwardRef(ButtonBase)
                                      aria-label="Open"
                                      centerRipple={true}
                                      className="MuiIconButton-root MuiAutocomplete-popupIndicator"
                                      classes={
                                        Object {
                                          "disabled": "Mui-disabled",
                                          "focusVisible": "Mui-focusVisible",
                                          "root": "MuiButtonBase-root",
                                        }
                                      }
                                      disabled={false}
                                      focusRipple={true}
                                      onClick={[Function]}
                                      tabIndex={-1}
                                      title="Open"
                                    >
                                      <button
                                        aria-label="Open"
                                        className="MuiButtonBase-root MuiIconButton-root MuiAutocomplete-popupIndicator"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onDragLeave={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex={-1}
                                        title="Open"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label"
                                        >
                                          <ForwardRef>
                                            <WithStyles(ForwardRef(SvgIcon))>
                                              <ForwardRef(SvgIcon)
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className="MuiSvgIcon-root"
                                                  focusable="false"
                                                  role="presentation"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M7 10l5 5 5-5z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </span>
                                        <NoSsr>
                                          <WithStyles(undefined)
                                            center={true}
                                          >
                                            <ForwardRef(TouchRipple)
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child",
                                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                                  "ripple": "MuiTouchRipple-ripple",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                  "root": "MuiTouchRipple-root",
                                                }
                                              }
                                            >
                                              <span
                                                className="MuiTouchRipple-root"
                                              >
                                                <TransitionGroup
                                                  childFactory={[Function]}
                                                  component={null}
                                                  exit={true}
                                                />
                                              </span>
                                            </ForwardRef(TouchRipple)>
                                          </WithStyles(undefined)>
                                        </NoSsr>
                                      </button>
                                    </ForwardRef(ButtonBase)>
                                  </WithStyles(ForwardRef(ButtonBase))>
                                </ForwardRef(IconButton)>
                              </WithStyles(ForwardRef(IconButton))>
                            </div>
                            <WithStyles(ForwardRef(NotchedOutline))
                              className="MuiOutlinedInput-notchedOutline"
                              label={
                                <React.Fragment>
                                  Combo box
                                </React.Fragment>
                              }
                              labelWidth={0}
                              notched={false}
                            >
                              <ForwardRef(NotchedOutline)
                                className="MuiOutlinedInput-notchedOutline"
                                classes={
                                  Object {
                                    "legend": "PrivateNotchedOutline-legend-104",
                                    "legendLabelled": "PrivateNotchedOutline-legendLabelled-105",
                                    "legendNotched": "PrivateNotchedOutline-legendNotched-106",
                                    "root": "PrivateNotchedOutline-root-103",
                                  }
                                }
                                label={
                                  <React.Fragment>
                                    Combo box
                                  </React.Fragment>
                                }
                                labelWidth={0}
                                notched={false}
                              >
                                <fieldset
                                  aria-hidden={true}
                                  className="PrivateNotchedOutline-root-103 MuiOutlinedInput-notchedOutline"
                                >
                                  <legend
                                    className="PrivateNotchedOutline-legendLabelled-105"
                                  >
                                    <span>
                                      Combo box
                                    </span>
                                  </legend>
                                </fieldset>
                              </ForwardRef(NotchedOutline)>
                            </WithStyles(ForwardRef(NotchedOutline))>
                          </div>
                        </ForwardRef(InputBase)>
                      </WithStyles(ForwardRef(InputBase))>
                    </ForwardRef(OutlinedInput)>
                  </WithStyles(ForwardRef(OutlinedInput))>
                </div>
              </ForwardRef(FormControl)>
            </WithStyles(ForwardRef(FormControl))>
          </ForwardRef(TextField)>
        </WithStyles(ForwardRef(TextField))>
      </div>
    </ForwardRef(Autocomplete)>
  </WithStyles(ForwardRef(Autocomplete))>
</Counter>
`;
